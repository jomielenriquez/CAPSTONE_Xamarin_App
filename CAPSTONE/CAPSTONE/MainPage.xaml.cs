using CAPSTONE.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace CAPSTONE
{
    public partial class MainPage : ContentPage
    {
        LoginViewModel viewModel = new LoginViewModel();

        public async Task<string> TestAsync()
        {
            using (var client = new HttpClient())
            {
                var uri = "http://www.capstone.somee.com/Systems/LoginUser?username="+ entry_username.Text + "&&password="+ entry_pass.Text + "&&acnttype=TENFORCER";
                var result = await client.GetStringAsync(uri);

                //handling the answer  
                //var posts = JsonConvert.DeserializeObject<string>(result);
                LoadingModalVisibility(false);

                //lblUsername.Text = result.ToString();
                if (result.ToString() == "Error")
                {
                    await DisplayAlert("Error", "Invalid username or password", "OK");
                    return "Error";
                }

                string[] response = result.ToString().Split(new [] { "<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->"}, StringSplitOptions.None);

                await Navigation.PushAsync(new DashBoard(response[0]));
                return result.ToString();
            }
        }
        public MainPage()
        {
            InitializeComponent();
            BindingContext = viewModel;

            viewModel.IsLoading = false;
            

        }

        public async void OnButtonLogin(object sender, EventArgs args)
        {
            LoadingModalVisibility(true);
            if (entry_username.Text == null || entry_username.Text == "") {
                LoadingModalVisibility(false);
                await DisplayAlert("Error", "Please enter username", "OK");
                return;
            }
            if (entry_pass.Text == null || entry_pass.Text == "")
            {
                LoadingModalVisibility(false);
                await DisplayAlert("Error", "Please enter password", "OK");
                return;
            }

            _ = TestAsync();
        }

        public void OnButtonCancel(object sender, EventArgs args)
        {
            LoadingModalVisibility(false);
        }

        public void LoadingModalVisibility(bool status)
        {
            boxView.IsVisible = status;
            activityIndicator.IsRunning = status;
            activityIndicator.IsVisible = status;
            stackLayout.IsVisible = status;

        }
        
    }
}
